{"version":3,"sources":["redux/actions.js","redux/actionTypes.js","redux/reducers/buttons.js","redux/store.js","Screen.js","Button.js","Buttons.js","App.js","serviceWorker.js","index.js"],"names":["startProcess","process","type","initialState","number","screen","percentageClickedInitial","processContinued","firstNumber","equal","numberClickedScreen","state","action","equalClicked","Number","toString","persistConfig","key","storage","reducer","combineReducers","buttons","R","persistedReducer","persistReducer","store","window","devToolsExtension","createStore","persistor","persistStore","Screen","props","screenState","useSelector","className","Button","dispatch","useDispatch","onClick","ButtonClicked","finalClass","orange","white","large","buttonClass","Buttons","App","Boolean","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","loading","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8793617e.chunk.js","sourcesContent":["import { NUMBER_CLICKED, AC_CLICKED, MINUS_CLICKED, PERCENTAGE_CLICKED, POINT_CLICKED, EQUAL_CLICKED,START_PROCESS } from './actionTypes';\nexport const numberClicked = (number) => (\n    {\n        type: NUMBER_CLICKED,\n        number,\n    }\n)\n\nexport const acClicked = () => (\n    {\n        type: AC_CLICKED,\n    }\n)\nexport const minusClicked = () => (\n    {\n        type: MINUS_CLICKED,\n    }\n)\nexport const percentageClicked = () => (\n    {\n        type: PERCENTAGE_CLICKED,\n    }\n)\nexport const pointClicked = () => (\n    {\n        type: POINT_CLICKED,\n    }\n)\nexport const equalClicked = () => (\n    {\n        type: EQUAL_CLICKED,\n    }\n)\nexport const startProcess = (process) => (\n    {\n        type: START_PROCESS,\n        process,\n    }\n)","export const NUMBER_CLICKED = 'NUMBER_CLICKED'\nexport const AC_CLICKED = 'AC_CLICKED'\nexport const MINUS_CLICKED = 'MINUS_CLICKED'\nexport const PERCENTAGE_CLICKED = 'PERCENTAGE_CLICKED'\nexport const POINT_CLICKED = 'POINT_CLICKED'\nexport const EQUAL_CLICKED = 'EQUAL_CLICKED'\nexport const START_PROCESS = 'START_PROCESS'","import { NUMBER_CLICKED, AC_CLICKED, MINUS_CLICKED, PERCENTAGE_CLICKED, POINT_CLICKED, EQUAL_CLICKED, START_PROCESS } from '../actionTypes';\nimport * as R from 'ramda'\nimport { percentageClicked } from '../actions';  //???\nconst initialState = {\n    number: \"\",\n    screen: \"0\",\n    percentageClickedInitial: false,  //???\n    processContinued: false,          //???\n    firstNumber: \"\",\n    process: \"\",\n    equal: false\n}\n//if percentage or division clicked,then start wrting new screen,otherwise add numbers to the current screen\nconst numberClickedScreen = (state, action) => {\n    if (state.percentageClickedInitial || state.processContinued || state.equal) {\n        return action.number\n    }\n\n    else {\n        return (state.screen === \"0\" ? action.number : state.screen + action.number)//why we check state.screen=0?\n    }\n}\nconst equalClicked = (state, action) => { //we have equalclicked defined in actiontypes,can we cretae it again here?\n    if (state.process === \"subtraction\") {\n        return (Number(state.firstNumber) - Number(state.screen)).toString()\n    }\n    if (state.process === \"summation\") {\n        return (Number(state.firstNumber) + Number(state.screen)).toString()\n    }\n    if (state.process === \"multiplication\") {\n        return (Number(state.firstNumber) * Number(state.screen)).toString()\n    }\n    if (state.process === \"division\") {\n        return (Number(state.firstNumber) / Number(state.screen)).toString()\n    }\n    if (state.process === \"\") {\n        return (state.screen)\n    }\n}\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case NUMBER_CLICKED: {\n            return {\n                ...state,\n                number: action.number,\n                screen: numberClickedScreen(state, action),\n                percentageClickedInitial: false,\n                processContinued: false,\n                equal: false\n\n            }\n        }\n        case AC_CLICKED: {\n            return {\n                ...state,\n                number: \"\",\n                screen: \"0\",\n                percentageClickedInitial: false,\n                process: \"\",//why we write process here? why we do not also write processcontinued?\n                equal: false\n            }\n        }\n        case MINUS_CLICKED: {\n            return {\n                ...state,\n                screen: R.head(state.screen) === '-' ? R.drop(1, state.screen) : R.concat('-', state.screen),\n                equal: false\n            }\n        }\n        case PERCENTAGE_CLICKED: {\n            return {\n                ...state,\n                screen: state.screen / 100,\n                percentageClickedInitial: true,\n                equal: false\n\n            }\n        }\n        case POINT_CLICKED: {\n            return {\n                ...state,\n                percentageClickedInitial: false,\n                screen: R.includes('.', state.screen) ? state.screen : R.concat(state.screen, '.'),\n                equal: false\n\n            }\n        }\n        case EQUAL_CLICKED: {\n            return {\n                ...state,\n                screen: equalClicked(state, action),\n                process: \"\",\n                equal: true\n            }\n        }\n        case START_PROCESS: {\n            return {\n                ...state,\n                firstNumber: state.screen,\n                process: action.process,\n                processContinued: true,\n                equal: false\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import { createStore, combineReducers } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\nimport buttons from './reducers/buttons'\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n};\n\nconst reducer = combineReducers({\n    buttons\n});\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nconst store = (window.devToolsExtension\n  ? window.devToolsExtension()(createStore)\n  : createStore)(persistedReducer);\nlet persistor = persistStore(store);\n\nexport { store, persistor };\n","import React from 'react'\nimport {useSelector} from 'react-redux'\n\nexport default function Screen(props) {\n    const screenState = useSelector(store => store.buttons.screen)\n\n    return (\n        <div className=\"screen\">{screenState}</div>\n    )\n}\n","import React from 'react';\nimport { acClicked, numberClicked, minusClicked, percentageClicked, pointClicked, equalClicked, startProcess } from \"./redux/actions\"\nimport { useDispatch } from \"react-redux\"\n\nexport default function Button(props) { //what does these two lines mean?\n    const dispatch = useDispatch()\n\n    const buttonClass = (props) => {\n        let finalClass = \"button-wrapper\"\n        if (props.orange) {\n            finalClass += \" button-orange\"\n        } else if (props.white) {\n            finalClass += \" button-white\"\n        }\n        if (props.large) {\n            finalClass += \" button-large-width\"\n        }\n        return finalClass\n    }\n\n    const ButtonClicked = (props) => { // what is the difference between two buttons.js files?\n        if (props.state === \"AC\" || props.state === \"C\") {\n            dispatch(acClicked())\n        } else if (props.state === \"/\") {\n            dispatch(startProcess(\"division\"))\n        \n        } else if (props.state === \"x\") {\n            dispatch(startProcess(\"multiplication\"))\n        } \n        else if (props.state === \"+\") {\n            dispatch(startProcess(\"summation\"))\n        }\n        else if (props.state === \"-\") {\n            dispatch(startProcess(\"subtraction\"))\n        } \n        else if (props.state === \"+/-\") {\n            dispatch(minusClicked())\n        }\n        else if (props.state === \"%\") {\n            dispatch(percentageClicked())\n\n        } else if (props.state === \".\") {\n            dispatch(pointClicked())\n\n        }\n        else if (props.state === \"=\") {\n            dispatch(equalClicked())\n\n        }\n        else {\n            dispatch(numberClicked(props.state.toString()))\n        }\n    }\n\n\n    return (\n        <div onClick={() => ButtonClicked(props)} className={buttonClass(props)} >\n            {props.state}\n        </div >\n    )\n}","import React from 'react';\nimport Button from './Button'\nimport { useSelector } from 'react-redux'\n\nexport default function Buttons(props) {\n    const process = useSelector(store => store.buttons.process)\n    const Screen = useSelector(store => store.buttons.screen)\n\n    const acButtonState = () => {\n        if (Screen === \"0\" || Screen === \"-0\") {\n            return \"AC\"\n        } else {\n            return \"C\"\n        }\n    }\n\n    return (\n        <div className='buttons-wrapper'>\n            <div className='buttons-row'>\n                <Button state={acButtonState()} white />\n                <Button state={'+/-'} white />\n                <Button state={'%'} white={true} /> \n                <Button state={'/'} orange={!(process === \"division\")} white={(process === \"division\")} />\n            </div>\n            <div className='buttons-row'>\n                <Button state={7} />\n                <Button state={8} />\n                <Button state={9} />\n                <Button state={'x'}  orange={!(process === \"multiplication\")} white={(process === \"multiplication\")} />\n\n            </div>\n            <div className='buttons-row'>\n                <Button state={4} />\n                <Button state={5} />\n                <Button state={6} />\n                <Button state={'-'}  orange={!(process === \"subtraction\")} white={(process === \"subtraction\")} />\n\n            </div>\n            <div className='buttons-row'>\n                <Button state={1} />\n                <Button state={2} />\n                <Button state={3} />\n                <Button state={'+'}  orange={!(process === \"summation\")} white={(process === \"summation\")} />\n            </div>\n            <div className='buttons-row'>\n                <Button state={0} large />\n                <Button state={'.'} />\n                <Button state={'='} orange />\n\n            </div>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport Screen from './Screen';\nimport './App.css';\nimport Buttons from './Buttons'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Screen />\n      <Buttons />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\")\n\nReactDOM.render(\n\n  <Provider store={store} >\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}